#!/software/bin/perl
### nomenclature

=pod

=head1 NAME - medline_cache_requester

=head1 COMMAND LINE PARAMETERS

Required parameters
  --file                    file to be processed
  --config_file             database connection config_file
  --pubmed_id_column        column number with pubmed IDs (>= 1)

Optional parameters
  --skip_title              skip the first (title) line
 
=head1 DESCRIPTION

Takes a file containing PubMed IDs (PMIDs) for MEDLINE records from the 
specified column of the tab-delimited file and loads them into the
MEDLINE cache database to subsequently be web-fetched by run(s) of:
medline_cache_pubmed_fetcher

Example command line:

./medline_cache_requester --config_file=medline_cache_db.ini 
  --file=../data/my_list_of_pubmed_ids.txt --pubmed_id_column=1 --skip_title
  
Uses the files:
GeneNomenclatureUtils/data/my_list_of_pubmed_ids.txt 
GeneNomenclatureUtils/conf/medline_cache_db.in

=head1 AUTHOR - mike_croning@hotmail.com

=cut

use strict;
use warnings;
use Carp;
use DPStore::Utils::Counts;
use GeneNomenclatureUtils::TabFileParser qw(
    parse_tab_delimited_file_to_array
    show_perldoc
);
use Getopt::Long;
use MedlineCacheDB;

# GLOBALS
my ($debug, $counts);

{
    print STDERR "\n$0\n", '=' x length($0), "\n\n";
    my ( $file, $pmid_column, $skip_title, $config_file ) = @_;
    
    GetOptions(
        "file=s"             => \$file,
        "pubmed_id_column=i" => \$pmid_column,
        "skip_title"         => \$skip_title,
        "config_file=s"      => \$config_file
    ) or show_perldoc();
    
    ### Check we have the correct parameters
    unless ($file) {
        show_perldoc('Must set --file');
    }
    unless ($pmid_column and $pmid_column >= 1) {
        show_perldoc('Must set --pubmed_id_column >= 1');
    }
    unless ($config_file) {
        show_perldoc("Must specify --config_file")
    }
    
    my $dba = MedlineCacheDB->new($config_file);
    
    initialise_counts();
    load_file($dba, $file, $pmid_column, $skip_title);

    END {
        $counts->display_counts(\*STDERR) if $counts;
    }
}

sub initialise_counts {
    my @counts = qw(
        total_pmids_parsed
        pmids_stored
        pmids_already_available
        pmids_already_requested
        pmids_with_error
        medline_entries_fetched
    );
    $counts = DPStore::Utils::Counts->new(@counts);
}

sub load_file {
    my ( $dba, $file, $pmid_column, $skip_title ) = @_;
    
    my $entries = parse_tab_delimited_file_to_array($file);
    if ($skip_title) {
        shift(@$entries);
        print STDERR "Skipped title row\n";
    }
    
    my $row_count = 0;
    foreach my $entry (@$entries) {
    
        $row_count++;
        my $line = join("\t", @$entry);
        
        my $pubmed_id = $entry->[$pmid_column - 1];
        unless ($pubmed_id and $pubmed_id =~ /^\d+$/) {
            confess "Error with pubmed_id on '$line'";    
        }
        
        my ( $request_id, $status ) = $dba->check_for_pubmed_id($pubmed_id);
        if ($request_id) {
            if ($status eq 'available') {
                $counts->increment_pmids_already_available;
            } elsif ($status eq 'requested') {
                $counts->increment_pmids_already_requested;
            } elsif ($status eq 'error')  {
                $counts->increment_pmids_with_error;
            } 
        } else {
            
            $dba->store_request($pubmed_id);
            $counts->increment_pmids_stored;
        }
    }
    
    print STDERR "IDs parsed: $row_count\n";
}
