#!/usr/local/bin/perl
### nomenclature

=pod

=head1 NAME - pad_tabs_to_column_width

=head1 COMMAND LINE PARAMETERS 

Required parameters
  --file                    file to check
  --width                   width to which to pad (>=1)
    
=head1 DESCRIPTION

Pad the tab-delimited file to the specified width

=head1 AUTHOR - mike_croning@hotmail.com

=cut

use strict;
use warnings;
use Carp;
use DPStore::Utils qw(
    show_perldoc
);
use DPStore::Utils::TabFileParser qw(
    clean_array_elements_of_whitespace
    clean_line_of_trailing_whitespace
    clean_tab_delimited_file
    close_data_files
    close_output_files
    confirm_keys_are_present
    open_data_file
    open_output_file
    output_array_of_arrays
    output_hash_of_arrays
    output_tab_delimited_txt_from_hash_of_arrays
    parse_tab_delimited_file_to_array
    parse_tab_delimited_file_to_hash_keyed_by_column
    read_next_line_from_data_file 
    set_tabfileparser_clobber
    set_tabfile_parser_path_root
    write_line_to_output_file
    write_lines_to_output_file
);   
use Data::Dumper;
use Getopt::Long;

{
    print STDERR "\n$0\n", '=' x length($0), "\n\n";
    my ($file, $width);
        
    GetOptions(
        "file=s"          => \$file,
        "width=i"         => \$width
    ) or show_perldoc();
    show_perldoc("Must set --file") unless $file;
    unless ($width and $width > 0) {
        show_perldoc("Must set --width >= 0");
    }
    
    my $data = parse_tab_delimited_file_to_array($file, 'clean');

    my $line_count          = 0;
    my $modified_line_count = 0;
    foreach my $entry (@$data) {
        my $modified;

        $line_count++;
        while (@$entry < $width) {
            push(@$entry, '');
            $modified++;
        }
        
        $modified_line_count++ if $modified;
        print join("\t", @$entry);
		print "\n";        
    }
    
    print STDERR "Lines padded: $modified_line_count\n";    
    print STDERR "Total lines : $line_count\n\n";
} 
