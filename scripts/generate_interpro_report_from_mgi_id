#!/usr/local/bin/perl
### nomenclature

=pod

=head1 NAME - generate_interpro_report_from_mgi_id

=head1 COMMAND LINE PARAMETERS 

Required parameters
  --file                    file to check
  --mgi_id_column           column containing MGI IDs (>=1)  
  --output_mode             'by_gene'  or 'by_abundance'
  
Optional parameters
  --skip_title              skip first (title) row

=head1 DESCRIPTION

Takes MGI IDs for genes from the specified tab-delimited file and
column and generates a summary of their InterPro protein sequence
matches, either 'by_gene' or 'by_abundance'

=head1 AUTHOR - mike_croning@hotmail.com

=cut

use strict;
use warnings;
use Carp;
use GeneNomenclatureUtils::SeqIDNomenclature qw(
    lookup_names_for_interpro_accs
    parse_mgi_interpro_domains_report_file
    parse_mgi_interpro_report_file
    parse_mgi_interpro_report_file_entry
    parse_mgi_list_2_file
);
use GeneNomenclatureUtils::TabFileParser qw(
    parse_tab_delimited_file_to_array
    show_perldoc
);
use Getopt::Long;
use Data::Dumper;

{
    print STDERR "\n$0\n", '=' x length($0), "\n\n";
    my ($file, $mgi_column, $skip_title, $output_mode);
        
    GetOptions(
        "file=s"          => \$file,
        "mgi_id_column=i" => \$mgi_column,
        "skip_title"      => \$skip_title,
        "output_mode=s"   => \$output_mode,
    ) or show_perldoc();
    show_perldoc("Must set --file") unless $file;
    unless (defined($mgi_column) and $mgi_column >= 1) {
        show_perldoc("--mgi_column must be >= 1");
    }
    unless ($output_mode) {
        show_perldoc("Must set --output_mode\n");
    }
    unless ($output_mode =~ /^by_gene$|^by_abundance$/) {
        show_perldoc("Must set --output_mode to 'by_abundance' or 'by_gene'");
    } 
    
    do_file($file, $mgi_column, $skip_title, $output_mode);
}

sub do_file {
    my ( $file, $mgi_column, $skip_title, $output_mode ) = @_;
    
    my $interpro_by_mgi_id    = parse_mgi_interpro_report_file();
    my $interpro_accs_to_name = parse_mgi_interpro_domains_report_file();
    
    my ($parsed_by_mgi_symbol, $parsed_by_mgi_id, $approved_name_by_mgi_id)
        = parse_mgi_list_2_file();
   
    my $entries = parse_tab_delimited_file_to_array($file);
    shift(@$entries) if $skip_title;
    
    ### Loop over the MGI IDs
    
    my $genes_seen = {};
    my $genes_seen_without_matches = {};
    
    my $ipr_accs_seen    = {};
    my $genes_by_ipr_acc = {};
    foreach my $entry (@$entries) {
    
        ### Mouse symbol, synonyms, name
        my $mgi_id = $entry->[$mgi_column - 1];
        next unless ($mgi_id);
        unless ($mgi_id =~ /^MGI:\d+/) {
            print STDERR "Not checking '$mgi_id'";
        }
        
        my $interpro_hits = $interpro_by_mgi_id->{$mgi_id}; 
        my $parsed_interpro_hits = parse_mgi_interpro_report_file_entry($interpro_hits);
        $interpro_hits = lookup_names_for_interpro_accs(
            $parsed_interpro_hits, $interpro_accs_to_name);
        
        if ($genes_seen->{$mgi_id}) { 
            next;
        }
        unless (keys(%$interpro_hits)) {
            $genes_seen_without_matches->{$mgi_id}++;
            next;
        }
        
        $genes_seen->{$mgi_id}++;
        
        ### Aggregate by IPR acc, counting and storing gene names
        foreach my $ipr_acc (keys(%$interpro_hits)) {
            $ipr_accs_seen->{$ipr_acc}++;
            
            $genes_by_ipr_acc->{$ipr_acc} ||= [];
            push (@{$genes_by_ipr_acc->{$ipr_acc}}, $mgi_id);
        }
    }
    
    my $gene_count = scalar(keys(%$genes_seen));
    
    ### Output by abundance
    if ($output_mode eq 'by_abundance') {
     
        foreach my $ipr_acc (sort { $ipr_accs_seen->{$b} <=> $ipr_accs_seen->{$a} } 
            keys(%$ipr_accs_seen)) {

            my $name = $interpro_accs_to_name->{$ipr_acc};
            print "$ipr_acc\t$ipr_accs_seen->{$ipr_acc}/$gene_count\t$name\n";
        }
    }
    
    ### Output by IPR and gene 
    if ($output_mode eq 'by_gene') {
    
        foreach my $ipr_acc (sort { $genes_by_ipr_acc->{$b} <=> $genes_by_ipr_acc->{$a} } 
            keys(%$genes_by_ipr_acc)) {

            my $name = $interpro_accs_to_name->{$ipr_acc};
            my $gene_count = scalar(@{$genes_by_ipr_acc->{$ipr_acc}});
            print "$ipr_acc\t$name\t$gene_count\t";

            my $genes_string = '';
            foreach my $mgi_id (@{$genes_by_ipr_acc->{$ipr_acc}}) {

                my $symbol = $parsed_by_mgi_id->{$mgi_id};
                $genes_string .= "$symbol\t";
            }
            chop($genes_string);

            print "$genes_string\n";
        }
    }
    
    print STDERR "Unique genes with InterPro matches: $gene_count\n";
    print STDERR "Unique genes without matches      : ";
    print STDERR scalar(keys(%$genes_seen_without_matches)), "\n";
    
    ### Output the genes with no matches
    
    foreach my $mgi_id (keys(%$genes_seen_without_matches)) {
    
        my $symbol = $parsed_by_mgi_id->{$mgi_id};
        if ($symbol) {
            print STDERR "  $symbol\t$mgi_id\n";
        } else {
            print STDERR "Error with '$mgi_id'\n";
        }
    }
}
