#!/usr/local/bin/perl
### nomenclature

=pod

=head1 NAME - generate_pubmed_disease_searches_from_gene_nomenclature_ids

=head1 COMMAND LINE PARAMETERS

Required parameters
  --file                    file to be processed
  --mgi_id_column           MGI ID column (>= 1)
  --entrez_gene_id_column   Entrez Gene ID column (>=1 )
  --hgnc_id_column          HGNC ID column (>=1)
  --mode                    must be set to 'disease'
  
Optional parameters
  --skip_title              skip first (title) row

=head1 DESCRIPTION

Automatically generates URLs for 'gene disease mutation' searches
of PubMed for human genes. Does this by using the MGI, Entrez Gene
and HGNC IDs to generate a synonym list for each gene and combine
these with relevenat MESH terms for mutations and disease.

=head1 AUTHOR - mike_croning@hotmail.com

=cut 

use strict;
use warnings;
use Carp;
use DPStore::Utils qw(
    show_perldoc
);
use DPStore::Utils::TabFileParser qw(
    clean_array_elements_of_whitespace
    clean_line_of_trailing_whitespace
    clean_tab_delimited_file
    close_data_files
    close_output_files
    confirm_keys_are_present
    open_data_file
    open_output_file
    output_array_of_arrays
    output_hash_of_arrays
    output_tab_delimited_txt_from_hash_of_arrays
    parse_tab_delimited_file_to_array
    parse_tab_delimited_file_to_hash_keyed_by_column
    read_next_line_from_data_file 
    set_tabfileparser_clobber
    set_tabfile_parser_path_root
    write_line_to_output_file
    write_lines_to_output_file
);
use DPStore::Utils::SeqIDNomenclature qw(
    check_for_file
    parse_hgnc_all_file
    parse_hgnc_all_file_entry
    parse_hgnc_core_file
    parse_mgi_hmd_human_phenotype_file
    parse_mgi_list_2_file
    parse_mgi_mouse_human_orthology_file
    parse_mgi_mouse_human_orthology_file_entry
    parse_mgi_mouse_human_sequence_file
    parse_mgi_mouse_human_sequence_file_entry
    parse_mgi_synonym_file
    parse_mim2gene
    parse_synonyms_from_hgnc_all_file
);
use Getopt::Long;
use Data::Dumper;

{
    print STDERR "\n$0\n", '=' x length($0), "\n\n";
    my ($file, $mgi_column, $entrez_column, $hgnc_column
        , $mode, $skip_title);
        
    GetOptions(
        "file=s"                    => \$file,
        "mgi_id_column=i"           => \$mgi_column,
        "entrez_gene_id_column=i"   => \$entrez_column,
        "hgnc_id_column=i"          => \$hgnc_column,
        "mode=s"                    => \$mode,
        "skip_title"                => \$skip_title,
    ) or show_perldoc();
    show_perldoc("Must set --file") unless $file;
    
    if (defined($mgi_column) and $mgi_column < 1) {
        show_perldoc("--mgi_column must be >= 1");
    } 
    if (defined($entrez_column) and $entrez_column < 1) {
        show_perldoc("--entrez_column must be >= 1");
    } 
    if (defined($hgnc_column) and $hgnc_column < 1) {
        show_perldoc("--hgnc_column must be >= 1");
    }
    
    unless ($mgi_column or $entrez_column or $hgnc_column) {
        show_perldoc("Must specify at least one of [mgi|entrez|hgnc]_column");
    }
    
    confess "Must set --mode" unless $mode;
    $mode = lc($mode); 
    unless ($mode eq 'disease') {
        confess "Must set --mode=disease";
    }

    do_file($file, $mode, $skip_title, $mgi_column
        , $entrez_column, $hgnc_column);
}

sub do_file {
    my ( $file, $mode, $skip_title, $mgi_column, $entrez_column
        , $hgnc_column ) = @_;
    
    ### Parse nomenclature files
    my ($parsed_by_mgi_symbol, $parsed_by_mgi_id, $approved_name_by_mgi_id
        , $mgi_synonyms_by_mgi_id, $mgi_mouse_human_parsed_by_mgi_id)
        = parse_mouse_nomenclature_files();

    my ($parsed_by_hgnc_symbol, $parsed_by_hgnc_id, $approved_name_by_hgnc_id
        , $hgnc_synonyms_by_hgnc_id, $all_parsed_by_hgnc_id
        , $all_parsed_by_entrez_gene_id)
        = parse_hgnc_nomenclature_files();
    
    my $entries = parse_tab_delimited_file_to_array($file);
    shift(@$entries) if $skip_title;
    
    ### Loop over the MGI IDs
    
    foreach my $entry (@$entries) {
    
        ### Mouse symbol, synonyms, name
        my $mgi_id = $entry->[$mgi_column - 1];
        my $mouse_terms = get_mouse_terms_by_mgi_id(
              $mgi_id
            , $parsed_by_mgi_symbol
            , $parsed_by_mgi_id
            , $approved_name_by_mgi_id
            , $mgi_synonyms_by_mgi_id
        );
        next unless $mouse_terms;
        
        ### EntrezGene (directly of via MGI ID)
        my $entrez_gene_human;
        if ($entrez_column) {
            $entrez_gene_human = $entry->[$entrez_column - 1]; 
        } else {
            my $ortho_entry = $mgi_mouse_human_parsed_by_mgi_id->{$mgi_id};
            if ($ortho_entry) {
                my $parsed_ortho_entry =
                    parse_mgi_mouse_human_sequence_file_entry($ortho_entry);
                $entrez_gene_human = $parsed_ortho_entry->{human_entrez_gene_id};
            }
        }
        
        ### HGNC ID (directly or via EntrezGene ID)
        my $hgnc_id;
        if ($hgnc_column) {
            $hgnc_id = $entry->[$hgnc_column - 1];
        } else {
            my $hgnc_entry = $all_parsed_by_entrez_gene_id->{$entrez_gene_human};
            if ($hgnc_entry) {
                my $parsed_hgnc_entry = 
                    parse_hgnc_all_file_entry($hgnc_entry);
                $hgnc_id = $parsed_hgnc_entry->{hgnc_id};
            }
        }
        
        ### Human symbol, synonyms, name    
        my $human_terms = get_human_terms_by_hgnc_id(  
              $hgnc_id
            , $parsed_by_hgnc_symbol
            , $parsed_by_hgnc_id
            , $approved_name_by_hgnc_id
            , $hgnc_synonyms_by_hgnc_id  
        );
        
        ### Combine the terms, and add the supplemental terms
                
        my $search_string = combine_terms($mouse_terms, $human_terms);
        
        my $search_name;
        if ($mouse_terms and @$mouse_terms) {
            $search_name = $mouse_terms->[0];
        } elsif ($human_terms and @$human_terms) {
            $search_name = $human_terms->[0];
        } else {
            $search_name = 'unknown';
        }
        
        ### Add the search specific stuff
        if ($mode eq 'disease') {
            $search_string .= get_mutation_terms();
        } else {
            confess "Can't do '$mode'";
        }
        
        print "$search_name\t$search_string\n";
    }
}



sub combine_terms {
    my ( @array_refs ) = @_;
    
    my $synonyms = {};
    
    foreach my $array (@array_refs) {
    
        foreach my $term (@$array) {
        
            $synonyms->{$term}++ if $term;
        }
    }

    my $string;
    foreach my $symbol (sort keys(%$synonyms)) {

        next if index($symbol, ' ') >=0;
        
        $string .= ' OR ' if $string;
        $string .= $symbol . ' [All Fields]';
    }
    return qq[( $string )];
}

sub get_mouse_terms_by_mgi_id {
    my ( $mgi_id, $parsed_by_mgi_symbol, $parsed_by_mgi_id
            , $approved_name_by_mgi_id, $mgi_synonyms_by_mgi_id ) = @_;
            
    my $terms = [];
    return $terms unless $mgi_id;
    
    my $symbol = $parsed_by_mgi_id->{$mgi_id}
        or confess "Did not recognise: '$mgi_id'";
        
    my $mgi_synonyms = $mgi_synonyms_by_mgi_id->{$mgi_id};
    
    my $mouse_approved_name = $approved_name_by_mgi_id->{$mgi_id}
        or confess "No approved name for $mgi_id";

    push (@$terms, $symbol);
    push (@$terms, @$mgi_synonyms) if $mgi_synonyms;
    push (@$terms, $mouse_approved_name);
    
    return $terms;
}

sub get_human_terms_by_hgnc_id {
    my ( $hgnc_id, $parsed_by_symbol, $parsed_by_hgnc_id
        , $approved_name_by_hgnc_id, $hgnc_synonyms_by_hgnc_id ) = @_;
        
    my $terms = [];
    return $terms unless $hgnc_id;
    
    my $symbol = $parsed_by_hgnc_id->{$hgnc_id}
        or warn "Did not recognise '$hgnc_id'";

    my $hgnc_synonyms = $hgnc_synonyms_by_hgnc_id->{$hgnc_id};

    my $human_approved_name = $approved_name_by_hgnc_id->{$hgnc_id}
        or warn "No human approved name for $hgnc_id";

    push (@$terms, $symbol);
    push (@$terms, @$hgnc_synonyms) if $hgnc_synonyms;
    push (@$terms, $human_approved_name) if $human_approved_name;
    
    return $terms;
}

sub get_mutation_terms {
    return ' AND ( single nucleotide polymorphism OR mutation OR polymorphism*  OR SNP OR SNPS OR duplication*  OR truncati*  OR deletion* OR  inversion* OR "translocation, genetic" [MESH] OR overexpressi* or OR "splice" [All Fields] OR splicing OR linkage OR cytogenetic*  OR syndrom*  OR nonsense or non-sense or missense or miss-sense ) AND (humans [MESH]) ';
}

sub get_disease_clause {

    return q[ AND (("single nucleotide polymorphism") OR ("mutation") OR]
        . q[ ("polymorphism") OR ("SNP") OR ("duplication") OR ("deletion") OR]
        . q[ ("inversion") OR ("translocation") OR ("overexpression") OR]
        . q[ ("splice") OR ("splicing") OR ("linkage") OR ("chromosome") OR]
        . q[ ("cytogenetics") OR ("disease") OR ("disorder"))]     
}

sub get_human_clause {
    
    return q[ AND "humans"[MeSH Terms]];
}

sub parse_mouse_nomenclature_files {
    
    return (  parse_mgi_list_2_file()
            , parse_mgi_synonym_file()
            , parse_mgi_mouse_human_sequence_file('allow_duplicates')
    );
}        

sub parse_hgnc_nomenclature_files {
    
    return (  parse_hgnc_core_file()
            , parse_synonyms_from_hgnc_all_file()
            , parse_hgnc_all_file()
    ); 
}

